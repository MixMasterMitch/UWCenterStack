<project name="UWCenterStack" default="zip" basedir=".">
    <description>
        Builds UWCenterStack for use on an iMX.6 Freecale proccessor board.
    </description>
    
    <!-- set global properties for this build -->
    <property name="src" location="srcs"/>
    <property name="build" location="build"/>
    <property name="build.project" location="${build}/project"/>
    <property name="build.project.src" location="${build.project}/srcs"/>
    <property name="build.output" location="${build}/output"/>
    <property name="zip.file" location="${build.output}/UWCenterStack.zip"/>
    <property name="config.file" location="config.xml"/>
    <property name="icon.file" location="icon.png"/>
    
    <target name="init" description="Setup build directories and copy project files into build/project directory">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${build.output}"/>
        
        <!-- Copy the project src code (and config.xml and icon) into ${build.project} -->
        <copy todir="${build.project.src}" overwrite="true">
            <fileset dir="${src}"/>
        </copy>
        <copy file="${config.file}" todir="${build.project}"/>
        <copy file="${icon.file}" todir="${build.project}"/>
    </target>
    
    <target name="sass-compile" depends="init" description="Compiles all sass and scss files into css">
        <apply executable="sass" dest="${build.project.src}" verbose="true" force="true" failonerror="true">
            <srcfile />
            <targetfile />
            <fileset dir="${build.project.src}" includes="**/*.scss,**/*.sass" />
            <firstmatchmapper>
                <globmapper from="*.sass" to="*.css" />
                <globmapper from="*.scss" to="*.css" />
            </firstmatchmapper>
        </apply>
        
        <!-- Delete the original .scss and sass files -->
        <delete>
            <fileset dir="${build.project}" includes="**/*.scss,**/*.sass" />
        </delete>
    </target>
    
    <target name="minify.js" depends="init">
        <!-- Minifiy all .js files and save them with -temp.min.js -->
        <apply dest="${build.project}" executable="java" parallel="false">
            <fileset dir="${build.project}" includes="**/*.js" excludes="**/*-temp.min.js" />
            <arg line="-jar"/>
            <arg path="lib/yuicompressor-2.4.4.jar"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="glob" from="*.js" to="*-temp.min.js"/>
            <targetfile/>
        </apply>
        
        <!-- Replace the original .js files with the minified version -->
        <move todir="${build.project}">
            <fileset dir="${build.project}"/>
            <mapper type="glob" from="*-temp.min.js" to="*.js"/>
        </move>
        <delete>
            <fileset dir="${build.project}" includes="**/*-temp.min.js" />
        </delete>
    </target>
    
    <target name="minify.css" depends="init, sass-compile">
        <!-- Minifiy all .css files and save them with -temp.min.css -->
        <apply dest="${build.project}" executable="java" parallel="false">
            <fileset dir="${build.project}" includes="**/*.css" excludes="**/*-temp.min.css" />
            <arg line="-jar"/>
            <arg path="lib/yuicompressor-2.4.4.jar"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="glob" from="*.css" to="*-temp.min.css"/>
            <targetfile/>
        </apply>
    	
        <!-- Replace the original .css files with the minified version -->
        <move todir="${build.project}">
            <fileset dir="${build.project}"/>
            <mapper type="glob" from="*-temp.min.css" to="*.css"/>
        </move>
        <delete>
            <fileset dir="${build.project}" includes="**/*-temp.min.css" />
        </delete>
    </target>
    
    <target name="zip" depends="minify.js, minify.css" description="Zip all of the generated files" >
        <zip destfile="${zip.file}"
            basedir="${build.project}"
        />
    </target>
    
    <target name="clean" description="clean up" >
        <!-- Delete the ${build} directory trees -->
        <delete dir="${build}"/>
    </target>
</project>